name: Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.1)'
        required: true
        type: string

permissions:
  contents: write
  packages: write

jobs:
  release:
    runs-on: macos-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Use Node.js 18.x
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
      
      - name: Package for macOS
        run: npm run dist
      
      - name: Get version from package.json
        id: version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
      
      - name: Check if release exists
        id: check-release
        run: |
          RELEASE_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/v${{ steps.version.outputs.version }}" | \
            jq -r '.id // empty' 2>/dev/null || echo "")
          if [ -n "$RELEASE_ID" ]; then
            echo "release_id=$RELEASE_ID" >> $GITHUB_OUTPUT
            echo "release_exists=true" >> $GITHUB_OUTPUT
          else
            echo "release_exists=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Create new release
        if: steps.check-release.outputs.release_exists == 'false'
        run: |
          # Create release using GitHub API
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases" \
            -d '{
              "tag_name": "v${{ steps.version.outputs.version }}",
              "name": "FlightAbove ${{ steps.version.outputs.version }}",
              "body": "## FlightAbove ${{ steps.version.outputs.version }}\n\n### ðŸ“¦ What'\''s New\n- Bug fixes and improvements\n- Enhanced performance and stability\n\n### ðŸ”§ Installation\n1. Download the appropriate DMG for your Mac:\n   - Intel Mac (x64): `FlightAbove-${{ steps.version.outputs.version }}.dmg`\n   - Apple Silicon: `FlightAbove-${{ steps.version.outputs.version }}-arm64.dmg`\n2. Open the DMG file\n3. Drag FlightAbove to your Applications folder\n4. Launch from Applications\n\n### ðŸ“‹ System Requirements\n- macOS 10.14 or later\n- Internet connection\n- 100MB free disk space\n\nFor complete documentation, see [README.md](https://github.com/${{ github.repository }}/blob/main/README.md)",
              "draft": false,
              "prerelease": false
            }'
          
          # Upload DMG files
          for file in release/*.dmg; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              echo "Uploading $filename..."
              curl -X POST \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                -H "Content-Type: application/octet-stream" \
                --data-binary "@$file" \
                "https://uploads.github.com/repos/${{ github.repository }}/releases/v${{ steps.version.outputs.version }}/assets?name=$filename"
            fi
          done
      
      - name: Update existing release
        if: steps.check-release.outputs.release_exists == 'true'
        run: |
          # Get existing assets
          ASSETS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/${{ steps.check-release.outputs.release_id }}/assets" | \
            jq -r '.[].id')
          
          # Delete existing assets
          for asset_id in $ASSETS; do
            if [ -n "$asset_id" ]; then
              echo "Deleting asset $asset_id..."
              curl -X DELETE \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                "https://api.github.com/repos/${{ github.repository }}/releases/assets/$asset_id"
            fi
          done
          
          # Upload new assets
          for file in release/*.dmg; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              echo "Uploading $filename..."
              curl -X POST \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                -H "Content-Type: application/octet-stream" \
                --data-binary "@$file" \
                "https://uploads.github.com/repos/${{ github.repository }}/releases/v${{ steps.version.outputs.version }}/assets?name=$filename"
            fi
          done
      
      - name: Update release notes
        if: steps.check-release.outputs.release_exists == 'true'
        run: |
          curl -X PATCH \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases/${{ steps.check-release.outputs.release_id }}" \
            -d '{
              "body": "## FlightAbove ${{ steps.version.outputs.version }} (Updated)\n\n### ðŸ“¦ What'\''s New\n- Bug fixes and improvements\n- Enhanced performance and stability\n\n### ðŸ”§ Installation\n1. Download the appropriate DMG for your Mac:\n   - Intel Mac (x64): `FlightAbove-${{ steps.version.outputs.version }}.dmg`\n   - Apple Silicon: `FlightAbove-${{ steps.version.outputs.version }}-arm64.dmg`\n2. Open the DMG file\n3. Drag FlightAbove to your Applications folder\n4. Launch from Applications\n\n### ðŸ“‹ System Requirements\n- macOS 10.14 or later\n- Internet connection\n- 100MB free disk space\n\nFor complete documentation, see [README.md](https://github.com/${{ github.repository }}/blob/main/README.md)"
            }'

  manual-release:
    runs-on: macos-latest
    if: github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Use Node.js 18.x
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Update version in package.json
        run: |
          npm version ${{ github.event.inputs.version }} --no-git-tag-version
      
      - name: Build application
        run: npm run build
      
      - name: Package for macOS
        run: npm run dist
      
      - name: Create release
        run: |
          # Create release using GitHub API
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases" \
            -d '{
              "tag_name": "v${{ github.event.inputs.version }}",
              "name": "FlightAbove ${{ github.event.inputs.version }}",
              "body": "## FlightAbove ${{ github.event.inputs.version }}\n\n### ðŸ“¦ What'\''s New\n- Bug fixes and improvements\n- Enhanced performance and stability\n\n### ðŸ”§ Installation\n1. Download the appropriate DMG for your Mac:\n   - Intel Mac (x64): `FlightAbove-${{ github.event.inputs.version }}.dmg`\n   - Apple Silicon: `FlightAbove-${{ github.event.inputs.version }}-arm64.dmg`\n2. Open the DMG file\n3. Drag FlightAbove to your Applications folder\n4. Launch from Applications\n\n### ðŸ“‹ System Requirements\n- macOS 10.14 or later\n- Internet connection\n- 100MB free disk space\n\nFor complete documentation, see [README.md](https://github.com/${{ github.repository }}/blob/main/README.md)",
              "draft": false,
              "prerelease": false
            }'
          
          # Upload DMG files
          for file in release/*.dmg; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              echo "Uploading $filename..."
              curl -X POST \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                -H "Content-Type: application/octet-stream" \
                --data-binary "@$file" \
                "https://uploads.github.com/repos/${{ github.repository }}/releases/v${{ github.event.inputs.version }}/assets?name=$filename"
            fi
          done
      
      - name: Commit version update
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json package-lock.json
          git commit -m "Bump version to ${{ github.event.inputs.version }}"
          git push 